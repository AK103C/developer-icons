---
import Layout from "@/layouts/Layout.astro";
import { SearchIcon } from "lucide-react";
import DI from "developer-icons";
import { categoriesData, iconsData } from "../../../../lib/iconsData";
import { generateIconCompName } from "../../../../lib/utils";
import { publicBaseUrl } from "@/lib/utils";
import clsx from "clsx";

export function getStaticPaths() {
  return ["All", ...categoriesData].map((category) => ({
    params: {
      category: category
        .replace("DevOps & AI/ML", "DevOps")
        .replaceAll(" ", "-"),
    },
  }));
}

const { category } = Astro.params;
console.log(category);

// Filter iconsData based on the selected category
const filteredIconsData =
  !category || category === "All"
    ? iconsData
    : iconsData.filter((icon) =>
        icon.categories.includes(
          category.replace("DevOps", "DevOps & AI/ML").replaceAll("-", " ")
        )
      );
---

<Layout title="Icons | Developer Icons">
  <main class="w-full h-[calc(100vh-78px)] flex gap-4">
    <aside
      class="w-1/4 h-full border-r-2 border-zinc-800 flex flex-col gap-2 text-zinc-400 p-1 sticky top-0"
    >
      {
        ["All", ...categoriesData].map((item) => (
          <a
            href={`${publicBaseUrl}/icons/${item.replace("DevOps & AI/ML", "DevOps").replaceAll(" ", "-")}`}
            class={clsx(
              `w-full rounded-lg hover:bg-zinc-800 px-4 py-2 cursor-pointer`,
              {
                "bg-zinc-700":
                  item
                    .replace("DevOps & AI/ML", "DevOps")
                    .replaceAll(" ", "-") === category,
              }
            )}
          >
            {item}
          </a>
        ))
      }
    </aside>
    <section class="w-full flex flex-col gap-3">
      <div class="relative w-full">
        <SearchIcon
          className="absolute top-1/2 left-3 -translate-y-1/2"
          size={16}
        />
        <input
          type="text"
          placeholder="Search developer icons"
          class="w-full p-2 px-5 pl-10 rounded-xl bg-transparent border border-zinc-800 placeholder:text-zinc-500"
        />
      </div>
      <div class="grid grid-cols-auto-fit gap-4 overflow-auto pr-1">
        {
          filteredIconsData.map((icon) => {
            const DynamicIcon = DI[generateIconCompName(icon.name)];
            return (
              <div class="w-full h-32 border border-zinc-800 rounded-lg flex flex-col items-center justify-center gap-2">
                <DynamicIcon size={50} />
                <p>{icon.name}</p>
              </div>
            );
          })
        }
      </div>
    </section>
  </main>
</Layout>
